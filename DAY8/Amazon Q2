#You may recall that an array arr is a mountain array if and only if:

arr.length >= 3
There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.


class Solution {
public:
    int longestMountain(vector<int>& arr) 
    {
        int n=arr.size();
        int ans=0,i=1,up=0,down=0;
        while(i<n)
        {
            up=0,down=0;
            while(i<n and arr[i]==arr[i-1])
                i++;
            
            while(i<n and arr[i]>arr[i-1])
            {
                up++;
                i++;
            }
            
            while(i<n and arr[i-1]>arr[i])
            {
                down++;
                i++;
            }
            if(up!=0 and down!=0)
                ans=max(ans,up+down+1);
        }
        return ans;
    }
};
